"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const datatype_1 = require("./serializer/datatype");
const update_1 = require("./commands/update");
const constant_1 = require("./constant");
const query_1 = require("./query");
/**
 * Db document
 */
class DocumentReference {
    /**
     * @param db    - db ref
     * @param coll  - collection
     * @param docID - document id
     */
    constructor(db, coll, docID, query) {
        this._db = db;
        this._coll = coll;
        this.id = docID;
        this._query = query || new query_1.Query(db, coll);
    }
    /**
     * 创建一篇文档
     *
     * @param data - document data
     */
    async create(data, options) {
        var _a, _b;
        if (!data || typeof data !== 'object' || 0 === ((_a = Object.keys(data)) === null || _a === void 0 ? void 0 : _a.length)) {
            throw new Error('data cannot be empty object');
        }
        const params = {
            collectionName: this._coll,
            data: datatype_1.serialize(data),
            multi: (_b = options === null || options === void 0 ? void 0 : options.multi) !== null && _b !== void 0 ? _b : false
        };
        const res = await this._query
            .send(constant_1.ActionType.add, params);
        if (res.error) {
            return {
                requestId: res.requestId,
                error: res.error,
                ok: false,
                id: undefined,
                insertedCount: undefined,
                code: res.code
            };
        }
        return {
            id: res.data._id || res.data[this._db.primaryKey],
            insertedCount: res.data.insertedCount,
            requestId: res.requestId,
            ok: true
        };
    }
    /**
     * 创建或添加数据
     *
     * 如果该文档 ID 在数据库中不存在，则创建该文档并插入数据，根据返回数据的 upsertId 判断
     *
     * @param data - document data
     */
    async set(data) {
        if (!this.id) {
            throw new Error('document id cannot be empty');
        }
        let hasOperator = false;
        const checkMixed = (objs) => {
            if (typeof objs === 'object') {
                for (let key in objs) {
                    if (objs[key] instanceof update_1.UpdateCommand) {
                        hasOperator = true;
                    }
                    else if (typeof objs[key] === 'object') {
                        checkMixed(objs[key]);
                    }
                }
            }
        };
        checkMixed(data);
        if (hasOperator) {
            // 不能包含操作符
            throw new Error('data cannot contain operator');
        }
        // merge === false indicates replace operation
        const merge = false;
        const res = await this._query
            .where({ [this._db.primaryKey]: this.id })
            .update(datatype_1.serialize(data), { merge, multi: false, upsert: true });
        return res;
    }
    /**
     * 更新数据
     *
     * @param data - 文档数据
     */
    async update(data) {
        // 把所有更新数据转为带操作符的
        const merge = true;
        const options = { merge, multi: false, upsert: false };
        const res = await this._query
            .where({ [this._db.primaryKey]: this.id })
            .update(data, options);
        return res;
    }
    /**
     * 删除文档
     */
    async remove() {
        const res = await this._query
            .where({ [this._db.primaryKey]: this.id })
            .remove({ multi: false });
        return res;
    }
    /**
     * 返回选中的文档
     */
    async get() {
        const res = await this._query
            .where({ [this._db.primaryKey]: this.id })
            .getOne();
        return res;
    }
    /**
     * 指定要返回的字段
     *
     * @param projection
     */
    field(projection) {
        return new DocumentReference(this._db, this._coll, this.id, this._query.field(projection));
    }
}
exports.DocumentReference = DocumentReference;
