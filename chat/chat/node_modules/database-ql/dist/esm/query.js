var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { ActionType } from './constant';
import { Validate } from './validate';
// import { Util } from './util'
import { QuerySerializer } from './serializer/query';
import { UpdateSerializer } from './serializer/update';
import { ErrorCode } from './constant';
import { Util } from './util';
import { serialize } from './serializer/datatype';
/**
 * Db query
 */
var Query = /** @class */ (function () {
    /**
     * @param db            - db reference
     * @param coll          - collection name
     * @param fieldFilters  - query condition
     * @param fieldOrders   - order by condition
     * @param queryOptions  - query options
     */
    function Query(db, coll, fieldFilters, fieldOrders, queryOptions, withs) {
        this._db = db;
        this._coll = coll;
        this._fieldFilters = fieldFilters;
        this._fieldOrders = fieldOrders || [];
        this._queryOptions = queryOptions || {};
        this._withs = withs || [];
        this._request = this._db.request;
    }
    /**
     * 查询条件
     *
     * @param query
     */
    Query.prototype.where = function (query) {
        // query校验 1. 必填对象类型  2. value 不可均为 undefiend
        if (Object.prototype.toString.call(query).slice(8, -1) !== 'Object') {
            throw Error(ErrorCode.QueryParamTypeError);
        }
        var keys = Object.keys(query);
        var checkFlag = keys.some(function (item) {
            return query[item] !== undefined;
        });
        if (keys.length && !checkFlag) {
            throw Error(ErrorCode.QueryParamValueError);
        }
        var _query = QuerySerializer.encode(query);
        return new Query(this._db, this._coll, _query, this._fieldOrders, this._queryOptions, this._withs);
    };
    /**
     * 设置排序方式
     *
     * @param fieldPath     - 字段路径
     * @param directionStr  - 排序方式
     */
    Query.prototype.orderBy = function (fieldPath, directionStr) {
        Validate.isFieldPath(fieldPath);
        Validate.isFieldOrder(directionStr);
        var newOrder = {
            field: fieldPath,
            direction: directionStr
        };
        var combinedOrders = this._fieldOrders.concat(newOrder);
        return new Query(this._db, this._coll, this._fieldFilters, combinedOrders, this._queryOptions, this._withs);
    };
    /**
     * 添加 一对多 子查询条件
     * @param param {WithParam}
     * @returns Query
     */
    Query.prototype.with = function (param) {
        var _a, _b;
        var newWith = {
            query: param.query,
            foreignField: param.foreignField,
            localField: param.localField,
            as: (_a = param.as) !== null && _a !== void 0 ? _a : param.query._coll,
            one: (_b = param.one) !== null && _b !== void 0 ? _b : false
        };
        var combinedWiths = this._withs.concat(newWith);
        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, this._queryOptions, combinedWiths);
    };
    /**
     * 添加 一对一 子查询条件
     * @param param {WithParam}
     * @returns Query
     */
    Query.prototype.withOne = function (param) {
        var _a;
        var newWith = {
            query: param.query,
            foreignField: param.foreignField,
            localField: param.localField,
            as: (_a = param.as) !== null && _a !== void 0 ? _a : param.query._coll,
            one: true
        };
        var combinedWiths = this._withs.concat(newWith);
        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, this._queryOptions, combinedWiths);
    };
    /**
     * 指定要返回的字段
     *
     * @param projection
     */
    Query.prototype.field = function (projection) {
        var formatted = {};
        if (projection instanceof Array) {
            var result = {};
            for (var _i = 0, projection_1 = projection; _i < projection_1.length; _i++) {
                var k = projection_1[_i];
                result[k] = 1;
            }
            formatted = result;
        }
        else {
            for (var k in projection) {
                if (projection[k]) {
                    if (typeof projection[k] !== 'object') {
                        formatted[k] = 1;
                    }
                }
                else {
                    formatted[k] = 0;
                }
            }
        }
        var option = __assign({}, this._queryOptions);
        option.projection = formatted;
        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option, this._withs);
    };
    /**
     * 设置查询条数
     *
     * @param limit - 限制条数，当前限制一次请求获取数据条数不得大于 1000
     */
    Query.prototype.limit = function (limit) {
        Validate.isInteger('limit', limit);
        var option = __assign({}, this._queryOptions);
        option.limit = limit;
        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option, this._withs);
    };
    /**
     * 设置偏移量
     *
     * @param offset - 偏移量
     */
    Query.prototype.skip = function (offset) {
        Validate.isInteger('offset', offset);
        var option = __assign({}, this._queryOptions);
        option.offset = offset;
        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option, this._withs);
    };
    /**
     * 设置分页查询
     * @param options { current: number, size: number} `current` 是页码，默认为 `1`, `size` 是每页大小, 默认为 10
     */
    Query.prototype.page = function (options) {
        var current = (options === null || options === void 0 ? void 0 : options.current) || 1;
        var size = (options === null || options === void 0 ? void 0 : options.size) || 10;
        var query = this
            .skip((current - 1) * size)
            .limit(size);
        query._queryOptions.count = true;
        return query;
    };
    /**
     * 克隆
     * @returns Query
     */
    Query.prototype.clone = function () {
        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, this._queryOptions, this._withs);
    };
    /**
     * 发起请求获取文档列表
     *
     * - 默认 `limit` 为 100
     * - 可以把通过 `orderBy()`、`where()`、`skip()`、`limit()`设置的数据添加请求参数上
     */
    Query.prototype.get = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!((_a = this._withs) === null || _a === void 0 ? void 0 : _a.length)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.internalMerge()];
                    case 1: return [2 /*return*/, _b.sent()];
                    case 2: return [4 /*yield*/, this.internalGet()];
                    case 3: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    /**
     * 发起请求获取一个文档
     * @param options
     * @returns
     */
    Query.prototype.getOne = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.limit(1).get()];
                    case 1:
                        res = _a.sent();
                        if (res.error) {
                            return [2 /*return*/, res];
                        }
                        if (!res.data.length) {
                            return [2 /*return*/, {
                                    ok: true,
                                    data: null,
                                    requestId: res.requestId
                                }];
                        }
                        return [2 /*return*/, {
                                ok: true,
                                data: res.data[0],
                                requestId: res.requestId
                            }];
                }
            });
        });
    };
    /**
     * [该接口已废弃，直接使用 `get()` 代替]
     * 发起请求获取文档列表，当使用 with 条件时使用
     *
     * @deprecated
     *
     * 1. 调用 get() 执行主查询
     * 2. 结合主查询的结果，使用 in 执行子表查询
     * 3. 合并主表 & 子表的结果，即聚合
     * 4. intersection 可指定是否取两个结果集的交集，缺省则以主表结果为主
     */
    Query.prototype.merge = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.internalMerge(options)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * 获取总数
     */
    Query.prototype.count = function () {
        return __awaiter(this, void 0, void 0, function () {
            var param, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        param = this.buildQueryParam();
                        return [4 /*yield*/, this.send(ActionType.count, param)];
                    case 1:
                        res = _a.sent();
                        if (res.error) {
                            return [2 /*return*/, {
                                    requestId: res.requestId,
                                    ok: false,
                                    error: res.error,
                                    total: undefined,
                                    code: res.code
                                }];
                        }
                        return [2 /*return*/, {
                                requestId: res.requestId,
                                total: res.data.total,
                                ok: true
                            }];
                }
            });
        });
    };
    /**
     * 发起请求批量更新文档
     *
     * @param data 数据
     */
    Query.prototype.update = function (data, options) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var param, res;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!data || typeof data !== 'object' || 0 === ((_a = Object.keys(data)) === null || _a === void 0 ? void 0 : _a.length)) {
                            throw new Error('data cannot be empty object');
                        }
                        if (data.hasOwnProperty('_id')) {
                            throw new Error('can not update the `_id` field');
                        }
                        param = this.buildQueryParam();
                        param.multi = (_b = options === null || options === void 0 ? void 0 : options.multi) !== null && _b !== void 0 ? _b : false;
                        param.merge = (_c = options === null || options === void 0 ? void 0 : options.merge) !== null && _c !== void 0 ? _c : true;
                        param.upsert = (_d = options === null || options === void 0 ? void 0 : options.upsert) !== null && _d !== void 0 ? _d : false;
                        if (param.merge) {
                            param.data = UpdateSerializer.encode(data);
                        }
                        else {
                            param.data = serialize(data);
                        }
                        return [4 /*yield*/, this.send(ActionType.update, param)];
                    case 1:
                        res = _e.sent();
                        if (res.error) {
                            return [2 /*return*/, {
                                    requestId: res.requestId,
                                    error: res.error,
                                    ok: false,
                                    code: res.code,
                                    updated: undefined,
                                    matched: undefined,
                                    upsertId: undefined
                                }];
                        }
                        return [2 /*return*/, {
                                requestId: res.requestId,
                                updated: res.data.updated,
                                matched: res.data.matched,
                                upsertId: res.data.upsert_id,
                                ok: true
                            }];
                }
            });
        });
    };
    /**
     * 条件删除文档
     */
    Query.prototype.remove = function (options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var param, res;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (Object.keys(this._queryOptions).length > 0) {
                            console.warn('`offset`, `limit` and `projection` are not supported in remove() operation');
                        }
                        if (((_a = this._fieldOrders) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                            console.warn('`orderBy` is not supported in remove() operation');
                        }
                        param = this.buildQueryParam();
                        param.multi = (_b = options === null || options === void 0 ? void 0 : options.multi) !== null && _b !== void 0 ? _b : false;
                        return [4 /*yield*/, this.send(ActionType.remove, param)];
                    case 1:
                        res = _c.sent();
                        if (res.error) {
                            return [2 /*return*/, {
                                    requestId: res.requestId,
                                    error: res.error,
                                    ok: false,
                                    deleted: undefined,
                                    code: res.code
                                }];
                        }
                        return [2 /*return*/, {
                                requestId: res.requestId,
                                deleted: res.data.deleted,
                                ok: true
                            }];
                }
            });
        });
    };
    /**
     * Build query param
     * @returns
     */
    Query.prototype.buildQueryParam = function () {
        var _a;
        var param = {
            collectionName: this._coll,
        };
        if (this._fieldFilters) {
            param.query = this._fieldFilters;
        }
        if ((_a = this._fieldOrders) === null || _a === void 0 ? void 0 : _a.length) {
            param.order = __spreadArrays(this._fieldOrders);
        }
        if (this._queryOptions.offset) {
            param.offset = this._queryOptions.offset;
        }
        if (this._queryOptions.limit) {
            param.limit = this._queryOptions.limit < 1000 ? this._queryOptions.limit : 1000;
        }
        else {
            param.limit = 100;
        }
        if (this._queryOptions.projection) {
            param.projection = this._queryOptions.projection;
        }
        if (this._queryOptions.count) {
            param.count = this._queryOptions.count;
        }
        return param;
    };
    /**
    * 发起请求获取文档列表
    */
    Query.prototype.internalGet = function () {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var param, res, documents, result;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        param = this.buildQueryParam();
                        return [4 /*yield*/, this.send(ActionType.query, param)];
                    case 1:
                        res = _d.sent();
                        if (res.error) {
                            return [2 /*return*/, {
                                    error: res.error,
                                    data: res.data,
                                    requestId: res.requestId,
                                    ok: false,
                                    code: res.code
                                }];
                        }
                        documents = Util.formatResDocumentData(res.data.list);
                        result = {
                            data: documents,
                            requestId: res.requestId,
                            ok: true
                        };
                        if (res.total)
                            result.total = (_a = res.data) === null || _a === void 0 ? void 0 : _a.total;
                        if (res.limit)
                            result.limit = (_b = res.data) === null || _b === void 0 ? void 0 : _b.limit;
                        if (res.offset)
                            result.offset = (_c = res.data) === null || _c === void 0 ? void 0 : _c.offset;
                        return [2 /*return*/, result];
                }
            });
        });
    };
    /**
     * 发起请求获取文档列表，当使用 with 条件时使用
     *
     * 1. 调用 internalGet() 执行主查询
     * 2. 结合主查询的结果，使用 in 执行子表查询
     * 3. 合并主表 & 子表的结果，即聚合
     * 4. intersection 可指定是否取两个结果集的交集，缺省则以主表结果为主
     */
    Query.prototype.internalMerge = function (options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var intersection, res, _loop_1, _i, _b, _with, state_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options = options !== null && options !== void 0 ? options : {};
                        intersection = (_a = options === null || options === void 0 ? void 0 : options.intersection) !== null && _a !== void 0 ? _a : false;
                        return [4 /*yield*/, this.internalGet()];
                    case 1:
                        res = _c.sent();
                        if (!res.ok) {
                            return [2 /*return*/, res];
                        }
                        _loop_1 = function (_with) {
                            var query, localField, foreignField, as, one, localValues, q, r_sub, _map, _i, _a, sub, key, results, _b, _c, m, key;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        query = _with.query, localField = _with.localField, foreignField = _with.foreignField, as = _with.as, one = _with.one;
                                        localValues = res.data.map(function (localData) { return localData[localField]; });
                                        q = query.clone();
                                        if (!q._fieldFilters) {
                                            q._fieldFilters = {};
                                        }
                                        q._fieldFilters[foreignField] = { '$in': localValues };
                                        r_sub = void 0;
                                        if (!q._withs.length) return [3 /*break*/, 2];
                                        return [4 /*yield*/, q.merge()]; // 如果子查询也使用了 with/withOne，则使用 merge() 查询
                                    case 1:
                                        r_sub = _d.sent(); // 如果子查询也使用了 with/withOne，则使用 merge() 查询
                                        return [3 /*break*/, 4];
                                    case 2: return [4 /*yield*/, q.get()];
                                    case 3:
                                        r_sub = _d.sent();
                                        _d.label = 4;
                                    case 4:
                                        if (!r_sub.ok) {
                                            return [2 /*return*/, { value: r_sub }];
                                        }
                                        _map = {};
                                        for (_i = 0, _a = r_sub.data; _i < _a.length; _i++) {
                                            sub = _a[_i];
                                            key = sub[foreignField] // 将子表结果的连接键的值做为映射表的 key
                                            ;
                                            if (one) {
                                                _map[key] = sub;
                                            }
                                            else {
                                                _map[key] = _map[key] || [];
                                                _map[key].push(sub); // 将子表结果放入映射表
                                            }
                                        }
                                        results = [];
                                        for (_b = 0, _c = res.data; _b < _c.length; _b++) {
                                            m = _c[_b];
                                            key = m[localField];
                                            m[as] = _map[key];
                                            // 如果取交集且子表结果无对应数据，则丢弃此条数据
                                            if (intersection && !_map[key]) {
                                                continue;
                                            }
                                            results.push(m);
                                        }
                                        res.data = results;
                                        return [2 /*return*/];
                                }
                            });
                        };
                        _i = 0, _b = this._withs;
                        _c.label = 2;
                    case 2:
                        if (!(_i < _b.length)) return [3 /*break*/, 5];
                        _with = _b[_i];
                        return [5 /*yield**/, _loop_1(_with)];
                    case 3:
                        state_1 = _c.sent();
                        if (typeof state_1 === "object")
                            return [2 /*return*/, state_1.value];
                        _c.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Send query request
     * @param action
     * @param param
     * @returns
     */
    Query.prototype.send = function (action, param) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._request.send(action, param)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Query;
}());
export { Query };
