import { ActionType, OrderByDirection } from './constant';
import { Db } from './index';
import { GetOneRes, GetRes, CountRes, UpdateRes, RemoveRes } from './result-types';
import { ProjectionType, QueryOrder, QueryParam } from './interface';
interface QueryOption {
    /**
     * 查询数量
     */
    limit?: number;
    /**
     * 偏移量
     */
    offset?: number;
    /**
     * 指定显示或者不显示哪些字段
     */
    projection?: ProjectionType;
    /**
     * 是否返回文档总数
     */
    count?: boolean;
}
interface WithParam {
    /**
     * 子查询
     */
    query: Query;
    /**
     * 主表联接键（关联字段）
     */
    localField: string;
    /**
     * 子表联接键（外键）
     */
    foreignField: string;
    /**
     * 结果集字段重命名，缺省则用子表名
     */
    as?: string;
    /**
     * 是否是一对一查询，只在 Query.withOne() 中使用
     */
    one?: boolean;
}
/**
 * Db query
 */
export declare class Query {
    /**
     * Reference to db instance
     */
    protected _db: Db;
    /**
     * Collection name
     */
    protected _coll: string;
    /**
     * Query conditions
     */
    private _fieldFilters;
    /**
     * Order by conditions
     */
    private _fieldOrders;
    /**
     * Query options
     */
    private _queryOptions;
    /**
     * Sub queries
     */
    private _withs;
    /**
     * Request instance
     */
    private _request;
    /**
     * @param db            - db reference
     * @param coll          - collection name
     * @param fieldFilters  - query condition
     * @param fieldOrders   - order by condition
     * @param queryOptions  - query options
     */
    constructor(db: Db, coll: string, fieldFilters?: Object, fieldOrders?: QueryOrder[], queryOptions?: QueryOption, withs?: WithParam[]);
    /**
     * 查询条件
     *
     * @param query
     */
    where(query: object): Query;
    /**
     * 设置排序方式
     *
     * @param fieldPath     - 字段路径
     * @param directionStr  - 排序方式
     */
    orderBy(fieldPath: string, directionStr: OrderByDirection): Query;
    /**
     * 添加 一对多 子查询条件
     * @param param {WithParam}
     * @returns Query
     */
    with(param: WithParam): Query;
    /**
     * 添加 一对一 子查询条件
     * @param param {WithParam}
     * @returns Query
     */
    withOne(param: WithParam): Query;
    /**
     * 指定要返回的字段
     *
     * @param projection
     */
    field(projection: string[] | ProjectionType): Query;
    /**
     * 设置查询条数
     *
     * @param limit - 限制条数，当前限制一次请求获取数据条数不得大于 1000
     */
    limit(limit: number): Query;
    /**
     * 设置偏移量
     *
     * @param offset - 偏移量
     */
    skip(offset: number): Query;
    /**
     * 设置分页查询
     * @param options { current: number, size: number} `current` 是页码，默认为 `1`, `size` 是每页大小, 默认为 10
     */
    page(options: {
        current: number;
        size: number;
    }): Query;
    /**
     * 克隆
     * @returns Query
     */
    clone(): Query;
    /**
     * 发起请求获取文档列表
     *
     * - 默认 `limit` 为 100
     * - 可以把通过 `orderBy()`、`where()`、`skip()`、`limit()`设置的数据添加请求参数上
     */
    get<T = any>(): Promise<GetRes<T>>;
    /**
     * 发起请求获取一个文档
     * @param options
     * @returns
     */
    getOne<T = any>(): Promise<GetOneRes<T>>;
    /**
     * [该接口已废弃，直接使用 `get()` 代替]
     * 发起请求获取文档列表，当使用 with 条件时使用
     *
     * @deprecated
     *
     * 1. 调用 get() 执行主查询
     * 2. 结合主查询的结果，使用 in 执行子表查询
     * 3. 合并主表 & 子表的结果，即聚合
     * 4. intersection 可指定是否取两个结果集的交集，缺省则以主表结果为主
     */
    merge<T = any>(options?: {
        intersection?: boolean;
    }): Promise<GetRes<T>>;
    /**
     * 获取总数
     */
    count(): Promise<CountRes>;
    /**
     * 发起请求批量更新文档
     *
     * @param data 数据
     */
    update(data: Object, options?: {
        multi?: boolean;
        merge?: boolean;
        upsert?: boolean;
    }): Promise<UpdateRes>;
    /**
     * 条件删除文档
     */
    remove(options?: {
        multi: boolean;
    }): Promise<RemoveRes>;
    /**
     * Build query param
     * @returns
     */
    protected buildQueryParam(): QueryParam;
    /**
    * 发起请求获取文档列表
    */
    protected internalGet<T = any>(): Promise<GetRes<T>>;
    /**
     * 发起请求获取文档列表，当使用 with 条件时使用
     *
     * 1. 调用 internalGet() 执行主查询
     * 2. 结合主查询的结果，使用 in 执行子表查询
     * 3. 合并主表 & 子表的结果，即聚合
     * 4. intersection 可指定是否取两个结果集的交集，缺省则以主表结果为主
     */
    protected internalMerge<T = any>(options?: {
        intersection?: boolean;
    }): Promise<GetRes<T>>;
    /**
     * Send query request
     * @param action
     * @param param
     * @returns
     */
    send(action: ActionType, param: QueryParam): Promise<import("./interface").ResponseStruct>;
}
export {};
