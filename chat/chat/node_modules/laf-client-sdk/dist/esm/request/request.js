var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import axios from 'axios';
import { EnvironmentType } from '../types';
/**
 * 默认使用 axios 发送请求，可支持浏览器 和 Node.js 环境，如需支持其它平台，请派生子类并重写 `send()` 方法
 */
var Request = /** @class */ (function () {
    function Request(options) {
        this.options = Object.assign({}, options);
        this.options.timeout = (options === null || options === void 0 ? void 0 : options.timeout) || 15000;
    }
    /**
     * 发送 less-api 数据操作请求, 由 `Db` 中调用
     * @param action
     * @param data
     * @returns
     */
    Request.prototype.send = function (action, data) {
        return __awaiter(this, void 0, void 0, function () {
            var params, slowQueryWarning, req_url, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = Object.assign({}, data, {
                            action: action
                        });
                        slowQueryWarning = setTimeout(function () {
                            console.warn('Database operation is longer than 3s. Please check query performance and your network environment.');
                        }, 3000);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 3, 4]);
                        req_url = this.options.baseUrl + this.options.dbProxyUrl;
                        return [4 /*yield*/, this.request(req_url, params)];
                    case 2:
                        res = _a.sent();
                        return [2 /*return*/, res.data];
                    case 3:
                        clearTimeout(slowQueryWarning);
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 发出 HTTP 请求，主要于 `less-api` 数据请求和 `less-framework` 云函数调用时使用
     * 默认使用 axios 发送请求，可支持浏览器 和 Node.js 环境，如需支持其它平台，请派生子类并重写本方法
     * @param data
     * @returns
     */
    Request.prototype.request = function (url, data) {
        return __awaiter(this, void 0, void 0, function () {
            var token, headers, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.options.environment !== EnvironmentType.H5) {
                            throw new Error('environment type must be h5');
                        }
                        token = this.options.getAccessToken();
                        headers = this.getHeaders(token);
                        return [4 /*yield*/, axios
                                .post(url, data, {
                                headers: headers,
                                timeout: this.options.timeout,
                            })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * 获取必要的请求头
     * @param token
     * @returns
     */
    Request.prototype.getHeaders = function (token, headers) {
        var _a;
        headers = headers !== null && headers !== void 0 ? headers : { 'Content-Type': 'application/json' };
        if (token) {
            headers['Authorization'] = "Bearer " + token;
        }
        var optionHeader = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.headers) || {};
        return Object.assign(headers, optionHeader);
    };
    return Request;
}());
export { Request };
