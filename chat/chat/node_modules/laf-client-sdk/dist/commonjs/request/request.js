"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const types_1 = require("../types");
/**
 * 默认使用 axios 发送请求，可支持浏览器 和 Node.js 环境，如需支持其它平台，请派生子类并重写 `send()` 方法
 */
class Request {
    constructor(options) {
        this.options = Object.assign({}, options);
        this.options.timeout = (options === null || options === void 0 ? void 0 : options.timeout) || 15000;
    }
    /**
     * 发送 less-api 数据操作请求, 由 `Db` 中调用
     * @param action
     * @param data
     * @returns
     */
    async send(action, data) {
        const params = Object.assign({}, data, {
            action
        });
        const slowQueryWarning = setTimeout(() => {
            console.warn('Database operation is longer than 3s. Please check query performance and your network environment.');
        }, 3000);
        try {
            const req_url = this.options.baseUrl + this.options.dbProxyUrl;
            const res = await this.request(req_url, params);
            return res.data;
        }
        finally {
            clearTimeout(slowQueryWarning);
        }
    }
    /**
     * 发出 HTTP 请求，主要于 `less-api` 数据请求和 `less-framework` 云函数调用时使用
     * 默认使用 axios 发送请求，可支持浏览器 和 Node.js 环境，如需支持其它平台，请派生子类并重写本方法
     * @param data
     * @returns
     */
    async request(url, data) {
        if (this.options.environment !== types_1.EnvironmentType.H5) {
            throw new Error('environment type must be h5');
        }
        const token = this.options.getAccessToken();
        const headers = this.getHeaders(token);
        const res = await axios_1.default
            .post(url, data, {
            headers,
            timeout: this.options.timeout,
        });
        return res;
    }
    /**
     * 获取必要的请求头
     * @param token
     * @returns
     */
    getHeaders(token, headers) {
        var _a;
        headers = headers !== null && headers !== void 0 ? headers : { 'Content-Type': 'application/json' };
        if (token) {
            headers['Authorization'] = `Bearer ${token}`;
        }
        const optionHeader = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.headers) || {};
        return Object.assign(headers, optionHeader);
    }
}
exports.Request = Request;
//# sourceMappingURL=request.js.map