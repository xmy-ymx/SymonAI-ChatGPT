var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { getType, isObject, isArray, isDate, isRegExp, isInternalObject, isObjectId, isBinary } from '../utils/type';
import { serialize as serializeInternalDataType, deserialize as deserializeInternalDataType } from './datatype';
function flatten(query, shouldPreserverObject, parents, visited) {
    var cloned = __assign({}, query);
    for (var key in query) {
        if (/^\$/.test(key))
            continue;
        var value = query[key];
        if (!value)
            continue;
        if (isObject(value) && !shouldPreserverObject(value)) {
            if (visited.indexOf(value) > -1) {
                throw new Error('Cannot convert circular structure to JSON');
            }
            var newParents = __spreadArrays(parents, [
                key,
            ]);
            var newVisited = __spreadArrays(visited, [
                value,
            ]);
            var flattenedChild = flatten(value, shouldPreserverObject, newParents, newVisited);
            cloned[key] = flattenedChild;
            var hasKeyNotCombined = false;
            for (var childKey in flattenedChild) {
                if (!/^\$/.test(childKey)) {
                    cloned[key + "." + childKey] = flattenedChild[childKey];
                    delete cloned[key][childKey];
                }
                else {
                    hasKeyNotCombined = true;
                }
            }
            if (!hasKeyNotCombined) {
                delete cloned[key];
            }
        }
    }
    return cloned;
}
export function flattenQueryObject(query) {
    return flatten(query, isConversionRequired, [], [query]);
}
export function flattenObject(object) {
    return flatten(object, function (_) { return false; }, [], [object]);
}
export function mergeConditionAfterEncode(query, condition, key) {
    if (!condition[key]) {
        delete query[key];
    }
    for (var conditionKey in condition) {
        if (query[conditionKey]) {
            if (isArray(query[conditionKey])) {
                query[conditionKey].push(condition[conditionKey]);
            }
            else if (isObject(query[conditionKey])) {
                if (isObject(condition[conditionKey])) {
                    Object.assign(query[conditionKey], condition[conditionKey]);
                }
                else {
                    console.warn("unmergable condition, query is object but condition is " + getType(condition) + ", can only overwrite", condition, key);
                    query[conditionKey] = condition[conditionKey];
                }
            }
            else {
                console.warn("to-merge query is of type " + getType(query) + ", can only overwrite", query, condition, key);
                query[conditionKey] = condition[conditionKey];
            }
        }
        else {
            query[conditionKey] = condition[conditionKey];
        }
    }
}
/**
 * Check `val` if `InternalObject` | `Date` | `RegExp` | `ObjectId` | `isBinary`
 * InternalObject can be:  `LogicCommand` | `QueryCommand` | `UpdateCommand`
 *
 * @tip this method also used is `flatten()` function, `flatten` will reserved the required object
 * @param val
 * @returns
 */
export function isConversionRequired(val) {
    return isInternalObject(val) || isDate(val) || isRegExp(val) || isObjectId(val) || isBinary(val);
}
export function encodeInternalDataType(val) {
    return serializeInternalDataType(val);
}
export function decodeInternalDataType(object) {
    return deserializeInternalDataType(object);
}
