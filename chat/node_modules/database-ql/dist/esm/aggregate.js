var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { QuerySerializer } from './serializer/query';
import { stringifyByEJSON } from './utils/utils';
import { getType } from './utils/type';
import { Validate } from './validate';
import { ActionType } from './constant';
import { Util } from './util';
var EARTH_RADIUS = 6378100;
var Aggregation = /** @class */ (function () {
    function Aggregation(db, collectionName, rawPipeline) {
        var _this = this;
        this._stages = [];
        if (db && collectionName) {
            this._db = db;
            this._request = this._db.request;
            this._collectionName = collectionName;
            if (rawPipeline && rawPipeline.length > 0) {
                rawPipeline.forEach(function (stage) {
                    Validate.isValidAggregation(stage);
                    var stageName = Object.keys(stage)[0];
                    _this._pipe(stageName, stage[stageName], true);
                });
            }
        }
    }
    Aggregation.prototype.end = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var res, documents, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this._collectionName || !this._db) {
                            throw new Error('Aggregation pipeline cannot send request');
                        }
                        if (!((_a = this._stages) === null || _a === void 0 ? void 0 : _a.length)) {
                            throw new Error('Aggregation stage cannot be empty');
                        }
                        return [4 /*yield*/, this._request.send(ActionType.aggregate, {
                                collectionName: this._collectionName,
                                stages: this._stages
                            })];
                    case 1:
                        res = _b.sent();
                        if (res.error) {
                            return [2 /*return*/, {
                                    error: res.error,
                                    data: res.data,
                                    requestId: res.requestId,
                                    ok: false,
                                    code: res.code
                                }];
                        }
                        documents = Util.formatResDocumentData(res.data.list);
                        result = {
                            data: documents,
                            requestId: res.requestId,
                            ok: true
                        };
                        return [2 /*return*/, result];
                }
            });
        });
    };
    Aggregation.prototype.unwrap = function () {
        return this._stages;
    };
    Aggregation.prototype.done = function () {
        return this._stages.map(function (_a) {
            var _b;
            var stageKey = _a.stageKey, stageValue = _a.stageValue;
            return _b = {},
                _b[stageKey] = JSON.parse(stageValue),
                _b;
        });
    };
    Aggregation.prototype._pipe = function (stage, param, raw) {
        if (raw === void 0) { raw = false; }
        // 区分param是否为字符串
        var transformParam = '';
        if (getType(param) === 'object') {
            transformParam = stringifyByEJSON(param);
        }
        else {
            transformParam = JSON.stringify(param);
        }
        this._stages.push({
            stageKey: raw ? stage : "$" + stage,
            stageValue: transformParam
        });
        return this;
    };
    Aggregation.prototype.addFields = function (param) {
        return this._pipe('addFields', param);
    };
    Aggregation.prototype.bucket = function (param) {
        return this._pipe('bucket', param);
    };
    Aggregation.prototype.bucketAuto = function (param) {
        return this._pipe('bucketAuto', param);
    };
    Aggregation.prototype.count = function (param) {
        return this._pipe('count', param);
    };
    Aggregation.prototype.geoNear = function (param) {
        if (param.query) {
            param.query = QuerySerializer.encode(param.query);
        }
        // 判断是否有 distanceMultiplier 参数
        if (param.distanceMultiplier && typeof (param.distanceMultiplier) === 'number') {
            param.distanceMultiplier = param.distanceMultiplier * EARTH_RADIUS;
        }
        else {
            param.distanceMultiplier = EARTH_RADIUS;
        }
        return this._pipe('geoNear', param);
    };
    Aggregation.prototype.group = function (param) {
        return this._pipe('group', param);
    };
    Aggregation.prototype.limit = function (param) {
        return this._pipe('limit', param);
    };
    Aggregation.prototype.match = function (param) {
        return this._pipe('match', QuerySerializer.encode(param));
    };
    Aggregation.prototype.project = function (param) {
        return this._pipe('project', param);
    };
    Aggregation.prototype.lookup = function (param) {
        return this._pipe('lookup', param);
    };
    Aggregation.prototype.replaceRoot = function (param) {
        return this._pipe('replaceRoot', param);
    };
    Aggregation.prototype.sample = function (param) {
        return this._pipe('sample', param);
    };
    Aggregation.prototype.skip = function (param) {
        return this._pipe('skip', param);
    };
    Aggregation.prototype.sort = function (param) {
        return this._pipe('sort', param);
    };
    Aggregation.prototype.sortByCount = function (param) {
        return this._pipe('sortByCount', param);
    };
    Aggregation.prototype.unwind = function (param) {
        return this._pipe('unwind', param);
    };
    return Aggregation;
}());
export default Aggregation;
