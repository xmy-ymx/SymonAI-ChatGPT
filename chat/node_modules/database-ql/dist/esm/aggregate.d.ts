import { Db } from './index';
import { AggregateStage, RequestInterface } from './interface';
import { GetRes } from './result-types';
export default class Aggregation {
    _db: Db;
    _request: RequestInterface;
    _stages: AggregateStage[];
    _collectionName: string;
    constructor(db?: Db, collectionName?: string, rawPipeline?: any[]);
    end<T = any>(): Promise<GetRes<T> | {
        error: string;
        data: any;
        requestId: string;
        ok: boolean;
        code: number;
    }>;
    unwrap(): AggregateStage[];
    done(): {
        [x: string]: any;
    }[];
    _pipe(stage: string, param: any, raw?: boolean): this;
    addFields(param: any): this;
    bucket(param: any): this;
    bucketAuto(param: any): this;
    count(param: any): this;
    geoNear(param: any): this;
    group(param: any): this;
    limit(param: any): this;
    match(param: any): this;
    project(param: any): this;
    lookup(param: any): this;
    replaceRoot(param: any): this;
    sample(param: any): this;
    skip(param: any): this;
    sort(param: any): this;
    sortByCount(param: any): this;
    unwind(param: any): this;
}
