import { LogicCommand } from '../commands/logic';
export declare type IQueryCondition = Record<string, any> | LogicCommand;
export declare type AnyObject = {
    [x: string]: any;
};
export declare function flattenQueryObject(query: Record<string, any>): Record<string, any>;
export declare function flattenObject(object: AnyObject): AnyObject;
export declare function mergeConditionAfterEncode(query: Record<string, any>, condition: Record<string, any>, key: string): void;
/**
 * Check `val` if `InternalObject` | `Date` | `RegExp` | `ObjectId` | `isBinary`
 * InternalObject can be:  `LogicCommand` | `QueryCommand` | `UpdateCommand`
 *
 * @tip this method also used is `flatten()` function, `flatten` will reserved the required object
 * @param val
 * @returns
 */
export declare function isConversionRequired(val: any): boolean;
export declare function encodeInternalDataType(val: any): IQueryCondition;
export declare function decodeInternalDataType(object: AnyObject): any;
