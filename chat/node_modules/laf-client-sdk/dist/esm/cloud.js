var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Db } from 'database-ql';
import { Request } from './request/request';
import { UniRequest } from './request/request-uni';
import { WxmpRequest } from './request/request-wxmp';
import { EnvironmentType } from './types';
/**
 * class Cloud provide the interface to request cloud function and cloud database.
 */
var Cloud = /** @class */ (function () {
    /**
     * Create a cloud instance
     * @param config
     */
    function Cloud(config) {
        var warningFunc = function () {
            console.warn('WARNING: no getAccessToken set for db proxy request');
            return "";
        };
        this.config = {
            baseUrl: config.baseUrl,
            dbProxyUrl: config.dbProxyUrl,
            getAccessToken: (config === null || config === void 0 ? void 0 : config.getAccessToken) || warningFunc,
            environment: (config === null || config === void 0 ? void 0 : config.environment) || EnvironmentType.H5,
            primaryKey: config === null || config === void 0 ? void 0 : config.primaryKey,
            timeout: config === null || config === void 0 ? void 0 : config.timeout,
            headers: config === null || config === void 0 ? void 0 : config.headers,
            requestClass: config === null || config === void 0 ? void 0 : config.requestClass
        };
        var reqClass = this.requestClass;
        this._request = new reqClass(this.config);
    }
    Object.defineProperty(Cloud.prototype, "requestClass", {
        /**
         * request class by environment
         */
        get: function () {
            var _a, _b, _c;
            var env = (_a = this.config) === null || _a === void 0 ? void 0 : _a.environment;
            var ret = Request;
            if ((_b = this.config) === null || _b === void 0 ? void 0 : _b.requestClass) {
                ret = (_c = this.config) === null || _c === void 0 ? void 0 : _c.requestClass;
            }
            else if (env === EnvironmentType.UNI_APP) {
                ret = UniRequest;
            }
            else if (env === EnvironmentType.WX_MP) {
                ret = WxmpRequest;
            }
            else {
                ret = Request;
            }
            return ret;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get a cloud database instance
     * @returns
     */
    Cloud.prototype.database = function () {
        var _a;
        return new Db({
            request: this._request,
            primaryKey: (_a = this.config) === null || _a === void 0 ? void 0 : _a.primaryKey
        });
    };
    /**
     * Invoke cloud function by name use POST http method
     * @alias alias of `invoke()` for history reason
     * @param functionName
     * @param data
     * @returns
     */
    Cloud.prototype.invokeFunction = function (functionName, data) {
        return __awaiter(this, void 0, void 0, function () {
            var url, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.config.baseUrl + ("/" + functionName);
                        return [4 /*yield*/, this
                                ._request
                                .request(url, data)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data];
                }
            });
        });
    };
    /**
     * Invoke cloud function by name use POST http method
     * @param functionName
     * @param data
     * @returns
     */
    Cloud.prototype.invoke = function (functionName, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.invokeFunction(functionName, data)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Cloud;
}());
export { Cloud, Db, Request };
