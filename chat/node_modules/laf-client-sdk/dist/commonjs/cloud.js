"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const database_ql_1 = require("database-ql");
exports.Db = database_ql_1.Db;
const request_1 = require("./request/request");
exports.Request = request_1.Request;
const request_uni_1 = require("./request/request-uni");
const request_wxmp_1 = require("./request/request-wxmp");
const types_1 = require("./types");
/**
 * class Cloud provide the interface to request cloud function and cloud database.
 */
class Cloud {
    /**
     * Create a cloud instance
     * @param config
     */
    constructor(config) {
        const warningFunc = () => {
            console.warn('WARNING: no getAccessToken set for db proxy request');
            return "";
        };
        this.config = {
            baseUrl: config.baseUrl,
            dbProxyUrl: config.dbProxyUrl,
            getAccessToken: (config === null || config === void 0 ? void 0 : config.getAccessToken) || warningFunc,
            environment: (config === null || config === void 0 ? void 0 : config.environment) || types_1.EnvironmentType.H5,
            primaryKey: config === null || config === void 0 ? void 0 : config.primaryKey,
            timeout: config === null || config === void 0 ? void 0 : config.timeout,
            headers: config === null || config === void 0 ? void 0 : config.headers,
            requestClass: config === null || config === void 0 ? void 0 : config.requestClass
        };
        const reqClass = this.requestClass;
        this._request = new reqClass(this.config);
    }
    /**
     * request class by environment
     */
    get requestClass() {
        var _a, _b, _c;
        const env = (_a = this.config) === null || _a === void 0 ? void 0 : _a.environment;
        let ret = request_1.Request;
        if ((_b = this.config) === null || _b === void 0 ? void 0 : _b.requestClass) {
            ret = (_c = this.config) === null || _c === void 0 ? void 0 : _c.requestClass;
        }
        else if (env === types_1.EnvironmentType.UNI_APP) {
            ret = request_uni_1.UniRequest;
        }
        else if (env === types_1.EnvironmentType.WX_MP) {
            ret = request_wxmp_1.WxmpRequest;
        }
        else {
            ret = request_1.Request;
        }
        return ret;
    }
    /**
     * Get a cloud database instance
     * @returns
     */
    database() {
        var _a;
        return new database_ql_1.Db({
            request: this._request,
            primaryKey: (_a = this.config) === null || _a === void 0 ? void 0 : _a.primaryKey
        });
    }
    /**
     * Invoke cloud function by name use POST http method
     * @alias alias of `invoke()` for history reason
     * @param functionName
     * @param data
     * @returns
     */
    async invokeFunction(functionName, data) {
        const url = this.config.baseUrl + `/${functionName}`;
        const res = await this
            ._request
            .request(url, data);
        return res.data;
    }
    /**
     * Invoke cloud function by name use POST http method
     * @param functionName
     * @param data
     * @returns
     */
    async invoke(functionName, data) {
        return await this.invokeFunction(functionName, data);
    }
}
exports.Cloud = Cloud;
//# sourceMappingURL=cloud.js.map